=============
BO4E
=============
|PyPi|_
|license|_
|code style|_
|PyPI pyversions|_


.. |PyPi| image:: https://img.shields.io/pypi/v/bo4e.svg
.. _PyPi: https://img.shields.io/pypi/v/bo4e

.. |license| image:: https://img.shields.io/badge/License-MIT-blue.svg
.. _license: https://github.com/Hochfrequenz/BO4E-python/blob/main/LICENSE.rst

.. |code style| image:: https://img.shields.io/badge/code%20style-black-000000.svg
.. _`code style`: https://github.com/psf/black

.. |PyPI pyversions| image:: https://img.shields.io/pypi/pyversions/bo4e.svg
.. _`PyPI pyversions`: https://pypi.python.org/pypi/bo4e/


üá©üá™ Dies ist eine BO4E Referenz-Implementierung in Python.
Gleichzeitig ist dieses Repository der Ort, um Fragen und Erweiterungen des BO4E-Standards zu diskutieren.

üá¨üáß This is a Python library that implements Business Objects for Energy `BO4E <https://www.bo4e.de/>`_.

Grunds√§tzliche √úberlegungen
===========================

Pflichtfelder (nicht nullable Attributes)
-----------------------------------------
Der BO4E Standard soll (in Zukunft, Stand 2023-10-05) keine fachlichen Pflichtfelder mehr enthalten.
Die Entscheidung, was in welchen F√§llen ein Pflichtfeld ist, obliegt den Anwendungen, die den Standard nutzen.
Entsprechend ist auch die Validierung der Pflichtfelder nicht Teil des BO4E Standards sondern anwendungsspezifisch.
Davon sind auch technische Pflichtfelder, namentlich `_typ` und `_version` nicht ausgenommen.
Ob sie anzugeben sind, entscheidet die Anwendung.
BO4E gibt sinnvolle Datenstrukturen vor, wie diese in der Praxis genutzt werden k√∂nnen und wollen wir aber nicht vorschreiben.

Verkn√ºpfungen zwischen Objekten
-------------------------------
Viele Objekte verweisen aufeinander und sind miteinander verkn√ºpft.
Dabei sind unsere Designentscheidungen:

* Alle Verkn√ºpfungen sind optional.
* Verkn√ºpfungen sind, wo sie naheliegend sind, im BO4E Standard vordefiniert (z.B. 1 Messlokation hat n Z√§hler).
* Aber wir haben nicht jede theoretisch denkbare Verkn√ºpfungen implementiert (z.B. allein dass User Z√§hler unter Angabe einer Email-Adresse suchen k√∂nnen, hei√üt nicht, dass der Z√§hler eine optionale Eigenschaft `emailAdresse` haben muss.)
* Generell sollen zwischen zwei BOs bi-direktional sein, zwischen BOs und COMs aber nur unidirektional (z.B. soll jeder Z√§hler wissen zu welcher Messlokation er geh√∂rt aber eine Adresse muss nicht wissen, welchem Gesch√§ftspartner, welcher Messlokation oder welcher Rechnung sie zugeordnet ist).
* Zwischen COMs sollen keine Verkn√ºpfungen bestehen (d.h. es sollen keine COMs in COMs eingebettet werden).

Dokumentation / Fragen und Anregungen zum BO4E Datenmodell
==========================================================
Eine Dokumentation des Datenmodells und JSON Schemata zur Erzeugung von Beispieldaten finden sich auf `read the docs <https://bo4e-python.readthedocs.io/en/latest/api/modules.html>`_.

Bei Fragen oder Anregungen, bitte `einfach ein Issue in diesem Repo aufmachen <https://github.com/Hochfrequenz/BO4E-python/issues/new?assignees=&labels=BO4E+Enhancement+Proposal&template=funktionale-anforderung-an-den-bo4e-standard.md&title=Ein+aussagekr%C3%A4ftiger+Titel%3A+Hunde-+und+Katzentarife+k%C3%B6nnen+nicht+abgebildet+werden>`_.

Code Beitr√§ge
=============
√Ñnderungsvorschl√§ge (sowohl an das Datenmodell als auch an die Implementierung in Python) k√∂nnen direkt als Code in Form von Pull Requests eingereicht werden.
Details dazu finden sich im `Contribution Guide`_.

Andere nennenswerte BO4E Implementierungen
==========================================

* `C#/.NET <https://github.com/Hochfrequenz/BO4E-dotnet>`_
* `Golang <https://github.com/Hochfrequenz/go-bo4e/>`_
* `Kotlin <https://github.com/openEnWi/ktBO4E-lib>`_
* `TypeScript (handcrafted) <https://github.com/openEnWi/tsBO4E-lib>`_
* `TypeScript (autogenerated, inherently consistent with the .NET library) <https://github.com/Hochfrequenz/bo4e-dotnet-ts-models>`_


.. _`BO4E website`: https://www.bo4e.de/dokumentation
.. _`Contribution Guide`: CONTRIBUTING.md
